# Solution to Project Euler problem 2

# Problem 2
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

#first step is create a sample to find all Fibonacci numbers bellow 10

def find_all_fibonacci_bellow_10():
 
    start_num = 0;  ## starts with 0
    new_fibonacci_num = 1  ## first add to 1 to start series
    
    new_fibonacci_num = 0 ## starts with 0
    print new_fibonacci_num

    new_fibonacci_num = 0 + 1
    print new_fibonacci_num  ## first add to 1 to start series
    
    temp_fibonacci_A = 0
    temp_fibonacci_B = 1

    while(temp_fibonacci_B + temp_fibonacci_A < 10):
        new_fibonacci_num = temp_fibonacci_B + temp_fibonacci_A
        temp_fibonacci_A = temp_fibonacci_B
        temp_fibonacci_B = new_fibonacci_num

        print new_fibonacci_num

#second change our program to add all fibonacci numbers bellow 10

def find_sum_of_all_fibonacci_bellow_10():
    sum = 0

    start_num = 0;  ## starts with 0
    new_fibonacci_num = 1  ## first add to 1 to start series
    
    new_fibonacci_num = 0 ## starts with 0
    print new_fibonacci_num

    new_fibonacci_num = 0 + 1
    print new_fibonacci_num  ## first add to 1 to start series
    
    temp_fibonacci_A = 0
    temp_fibonacci_B = 1

    while(temp_fibonacci_B + temp_fibonacci_A < 10):
        new_fibonacci_num = temp_fibonacci_B + temp_fibonacci_A
        temp_fibonacci_A = temp_fibonacci_B
        temp_fibonacci_B = new_fibonacci_num

        print new_fibonacci_num
        sum = sum+new_fibonacci_num

    print 'Sum of all fibonacci bellow 10 :' , sum

#third add the even number filter bellow 10

def find_sum_of_all_even_fibonacci_bellow_10():
    sum = 0

    start_num = 0;  ## starts with 0
    new_fibonacci_num = 1  ## first add to 1 to start series
    
    new_fibonacci_num = 0 ## starts with 0
    print new_fibonacci_num

    new_fibonacci_num = 0 + 1
    print new_fibonacci_num  ## first add to 1 to start series
    
    temp_fibonacci_A = 0
    temp_fibonacci_B = 1

    while(temp_fibonacci_B + temp_fibonacci_A < 10):
        new_fibonacci_num = temp_fibonacci_B + temp_fibonacci_A
        temp_fibonacci_A = temp_fibonacci_B
        temp_fibonacci_B = new_fibonacci_num

        print new_fibonacci_num
        
        if new_fibonacci_num%2==0:
            sum = sum+new_fibonacci_num

    print 'Sum of all EVEN fibonacci bellow 10 :' , sum

# Final solution our program add all even fibonacci bellow 4 million

def find_sum_of_all_even_fibonacci_bellow_4_millon_start_with_1_and_2():
    sum = 0

    new_fibonacci_num = 1 ## starts with 1
    #print new_fibonacci_num

    new_fibonacci_num = 2
    #print new_fibonacci_num  ## next num is 2 given in problem to start series
    
    temp_fibonacci_A = 1
    temp_fibonacci_B = 2

    sum = 2  # 2 is even number, and one of the first 2 in the series as per rule (adding here before compute) 

# 4 million is 40,00,000 (40 lakhs)
    while(temp_fibonacci_B + temp_fibonacci_A < 4000000):
        new_fibonacci_num = temp_fibonacci_B + temp_fibonacci_A
        temp_fibonacci_A = temp_fibonacci_B
        temp_fibonacci_B = new_fibonacci_num

        #print new_fibonacci_num  ##incase print is needed
        
        if new_fibonacci_num % 2==0:
            sum = sum+new_fibonacci_num

    
    print 'Sum of all EVEN fibonacci bellow 4 million starts with 1 and 2 :' , sum

if __name__ == "__main__":
    #find_all_fibonacci_bellow_10
    #find_sum_of_all_fibonacci_bellow_10() 
    #find_sum_of_all_even_fibonacci_bellow_10()
    find_sum_of_all_even_fibonacci_bellow_4_millon_start_with_1_and_2()

